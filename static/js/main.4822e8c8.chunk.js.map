{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","actionTypes.js","reducers.js","serviceWorker.js","index.js"],"names":["card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","cardList","cardComponent","robots","map","robot","Card","key","SearchBox","searchChange","type","placeholder","onChange","scroll","props","style","overflowY","borderTop","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","isPending","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","color","fontFamily","fontWeight","fontSize","message","components_Header","components_SearchBox","Scroll","components_ErrorBoundry","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","ThunkMiddleware","app","es","src_containers_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4822e8c8.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ({id, name, email}) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot img\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst cardList = ({ robots }) => {\n  const cardComponent = robots.map(robot => {\n    return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n  })\n  return ( \n    <div>\n      {cardComponent}\n    </div>\n    \n  )\n\n}\n\nexport default cardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robot\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst scroll = (props) => {\n  return (\n    <div style={{overflowY:'scroll', borderTop: '1px solid #333', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops that is not good.</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f2\">RoboFriends</h1>\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport \"./App.css\";\n\nimport { setSearchfield, requestRobots } from '../actions';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, isPending, error, searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase());\n    });\n\n    if (isPending) {\n      return <h1>Loading</h1>;\n    } \n\n    if (error) {\n      return <h1 style={{color: 'white', fontFamily: 'sans-serif', fontWeight: '300', fontSize: '4rem'}}>{`Ooops! Something went wrong. ${error.message}`}</h1>\n    }\n      \n    return (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './actionTypes';\n\nexport const setSearchfield = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n};\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './actionTypes';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport ThunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport {searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(\n    ThunkMiddleware,\n    logger\n  )\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}